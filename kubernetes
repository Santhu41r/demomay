    1  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-
key add -
    2  sudo add-apt-repository    "deb [arch=amd64] https://download.docke
r.com/linux/ubuntu $(lsb_release -cs)  stable"
    3  sudo apt-get remove docker docker-engine docker.io containerd runc
    4  sudo apt-get update
    5  sudo apt-get install docker-ce docker-ce-cli containerd.io
    6  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sud
o apt-key add -
    7  apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial
  main"
    8   apt-get install kubeadm=1.20.0-00 kubelet=1.20.0-00 kubectl -y
    9  kubectl version
   10  kubeadm init --pod-network-cidr=10.244.0.0/16
   11  mkdir -p $HOME/.kube
   12  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
   13  kubectl get ns
   14  kubectl get pods -n kube-system
   15  kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/m
aster/Documentation/kube-flannel.yml
   16  kubectl get pods -n kube-system
   17  kubectl cluster-info
   18  kubectl get nodes
   19  kubectl run --image=nginx nginx
   20  kubectl get pods -n default
   21  kubectl create namespace test
   22  kubectl get ns
   vim namspace.yml
   24  ls -l
  25  kubectl create -f namspace.yml 
   26  kubectl delete  -f namspace.yml 
   27  kubectl create -f namspace.yml 
   28  kubectl get ns
   29  vim simple.yml
   30  kubectl create -f simple.yml 
   31  kubectl get deployment -n demo
   32  kubectl get deployment -n demo  -o wide
   33  kubectl get pods -n demo  -o wide
   34  kubectl delete pods httpd-57fc687dcc-5zn5r -n demo
   35  kubectl get pods -n demo  -o wide
   36  kubectl describe deployment httpd -n demo
   37  kubectl create service nodeport httpd --tcp 80:80
   38  kubectl get service 
   39  kubectl create service nodeport httpd --tcp 80:80 -n demo
   40  kubectl get service -n demo
   41  kubectl get pods -n demo  -o wide
   42  mkdir /data
   43  vim pv.yml
   44  kubectl create -f pv.yml 
   45  kubectl get pv
   46  vim pvc.yml
   47  kubectl create -f pvc.yml 
   48  kubectl get pv
   49  kubectl get pvc -n demo
   50  vim deployment.yml
   51  kubectl create -f deployment.yml 
   52  kubectl get deployment -n demo  -o wide
   53  kubectl describe deployment nginx -n demo
   54  vim deployment.yml 
   55  kubectl apply -f deployment.yml 
   56  kubectl describe deployment nginx -n demo
   57  kubectl delete -f deployment.yml 
   58  kubectl describe deployment nginx -n demo
   59  kubectl apply -f deployment.yml 
   60  kubectl describe deployment nginx -n demo
   61  kubectl get pods -n demo
   62  kubectl describe pods nginx-685f8bcb9c-75rxs -n demo
   63  vim deployment.yml 
   64  kubectl apply -f deployment.yml 
   65  kubectl get pods -n demo
   66  cat deployment.yml 
   67  history 
   68  kubectl get svc -n demo
   69  kubectl get svc -n demo -o wide
   70  kubectl get pods -n demo -o wide
   71  kubectl describe pods nginx-55c9c7dc96-5xhzw -n demo
   72  ls -l
   73  vim service.yml
   74  kubectl create -f service.yml 
   75  kubectl get svc -n demo -o wide
   76  ubectl apply -f 
   77  kubectl create -f https://raw.githubusercontent.com/kubernetes/ingr
ess-nginx/controller-v0.34.1/deploy/static/provider/baremetal/deploy.yaml
   78  kubectl get ns
   79  kubectl get pods -n ingress-nginx
   80  kubectl get svc -n ingress-nginx
   81  kubectl get pods -n ingress-nginx -o wide
   82  vim nginx-igress-rule.yml
   83  kubectl create -f nginx-igress-rule.yml 
   84  vim nginx-igress-rule.yml
   85  kubectl apply -f nginx-igress-rule.yml 
   86  kubectl get pods -n demo
   87  kubectl exec -it httpd-57fc687dcc-84bnw -- /bin/bash
   88  kubectl exec -it httpd-57fc687dcc-84bnw -- /bin/bash -n demo
   89  kubectl -n demo exec -it httpd-57fc687dcc-84bnw -- /bin/bash 
   90  kubectl get pods -n demo
   91  kubectl -n demo exec -it httpd-57fc687dcc-bsnzc  -- /bin/bash 
   92  kubectl get ig -n demo
   93  kubectl get ingres -n demo
   94  kubectl get ingress -n demo
   95  kubectl describ  ingress nginx-ingress  -n demo
   96  kubectl describe  ingress nginx-ingress  -n demo
   97  kubectl get pods -n demo -o wide
   98  vim nginx-igress-rule.yml 
   99  kubectl appy -f nginx-igress-rule.yml 
  100  kubectl apply -f nginx-igress-rule.yml 
  101  vim quota.yml
  102  kubectl create -f quota.yml 
  103  kubectl get quota -n demo
  104  kubectl get pods -n demo
  105  kubectl logs httpd-57fc687dcc-84bnw -n demo
  106  kubectl logs httpd-57fc687dcc-84bnw -n demo -f
  107  history 
  
root@kmaster:~# cat deployment.yml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
  namespace: demo
  annotations:
    monitoring: "true"
spec:
  replicas: 4 
    selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - image: nginx:latest
        name: nginx
        ports:
        - containerPort: 80
        resources:
          limits:
            memory: "2Gi"
            cpu: "1000m"
          requests:
            memory: "1Gi"
            cpu: "500m"
        volumeMounts:
        - name: pvc1
          mountPath: /tmp
      volumes:
      - name: pvc1
        persistentVolumeClaim:
          claimName: my-volpvc
          
root@kmaster:~# cat namspace.yml 
apiVersion: v1
kind: Namespace
metadata:
  name: demo
  labels:
    apps: web-based
  annotations:
    type: demo
    
root@kmaster:~# cat pv.yml 
apiVersion: v1
kind: PersistentVolume
metadata:
  name: myvol
  namespace: demo
spec:
  storageClassName: manual
  capacity:
    storage: 2Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: "/data"
    
  
root@kmaster:~# cat pvc.yml 
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: my-volpvc
  namespace: demo
spec:
  storageClassName: manual
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
      
root@kmaster:~# cat quota.yml 
apiVersion: v1
kind: ResourceQuota
metadata:
  name: mem-cpu-demo
  namespace: demo
spec:
  hard:
    requests.cpu: "1"
    requests.memory: 1Gi
    limits.cpu: "2"
    limits.memory: 2Gi
    
 root@kmaster:~# cat quota.yml 
apiVersion: v1
kind: ResourceQuota
metadata:
  name: mem-cpu-demo
  namespace: demo
spec:
  hard:
    requests.cpu: "1"
    requests.memory: 1Gi
    limits.cpu: "2"
    limits.memory: 2Gi
root@kmaster:~# cat service.yml 
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: demo
spec:
  ports:
  - nodePort: 30400
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: nginx
  type: NodePort
  
root@kmaster:~# cat simple.yml 
apiVersion: apps/v1
kind: Deployment
metadata:
  name: httpd
  labels:
    app: httpd
  namespace: demo
  annotations:
    monitoring: "true"
spec:
  replicas: 4
  selector:
    matchLabels:
      app: httpd
  template:
    metadata:
      labels:
        app: httpd
    spec:
      containers:
      - image: httpd
        name: httpd
        ports:
        - containerPort: 80
 
  
root@kmaster:~# cat nginx-igress-rule.yml 
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: nginx-ingress
  namespace: demo
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: httpd
          servicePort: 80
        path: /
      - backend: 
         serviceName: nginx
         servicePort: 80
        path: /foo

  126  kubectl get nodes
  127  kubectl describe node worker1   
  128  kubectl create -f https://raw.githubusercontent.com/kubernetes/dashboard/v1.10.1/src/deploy/recommended/kubernetes-dashboard.yaml
  129  kubectl get pods -n kube-system
  130  vim admin.yml
  131  kubectl create -f admin.yml 
  132  kubectl edit svc kubernetes-dashboard  -n kube-system
  133  kubectl get svc -n kube-system
  134  kubectl get pods -n kube-system -o wide
  135  kubectl logs kubernetes-dashboard-65ff5d4cc8-tshkj -n kube-system
  136  kubectl logs kubernetes-dashboard-65ff5d4cc8-tshkj -n kube-system -f
  137  kubectl get secret -n kube-system
  138  kubectl -n kube-system describe secret admin-user-token-lmrjd
  139  kubectl get pods -n demo
  140  kubectl get deployment -n demo
  141  kubectl describe deployment httpd -n demo
  142  kubectl get deployment -n demo
  143* 
  144  kubectl get deployment -n demo
  145  kubectl create -f deployment.yml 
  146  kubectl get deployment -n demo
  147  kubectl get node
  148  kubectl get quota -n demo
  149  kubectl delete quota mem-cpu-demo
  150  kubectl delete quota mem-cpu-demo -n demo
  151  kubectl get deployment -n demo
  152  kubectl delete -f deployment.yml 
  153  kubectl get deployment -n demo
  154  kubectl create -f deployment.yml 
  155  kubectl get deployment -n demo
  156  kubectl autoscale --help
  157  kubectl autoscale deployment nginx --cpu-percent=50 --min=1 --max=10
  158  kubectl autoscale deployment nginx --cpu-percent=50 --min=1 --max=10 -n demo
  159  kubectl get hpa
  160  kubectl get hpa -n demo
  161  history 
  
    
   
root@kmaster:~# cat admin.yml 
apiVersion: v1
kind: ServiceAccount
metadata:
  name: admin-user
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: admin-user
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: admin-user
  namespace: kube-system
